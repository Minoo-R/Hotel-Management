# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'guestPanel.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import sqlite3
import re
import random


class guest():
    def __init__(self, fullname, phoneNumber, email, roomType, roomNumber, duration, paymentMethod):
        self.fullname = fullname
        self.phoneNumber = phoneNumber
        self.email = email
        self.roomType = roomType
        self.roomNumber = int(roomNumber)
        self.duration = int(duration)
        self.paymentMethod = paymentMethod

    def to_list(self):
        return [self.fullname, self.phoneNumber, self.email, self.roomType, self.roomNumber, self.duration, self.paymentMethod]

    def __str__(self):
        return f"{self.fullname}, {self.phoneNumber}, {self.email}, {self.roomType}, {self.roomNumber}, {self.duration}, {self.paymentMethod}"

    def __repr__(self):
        return self.__str__()


# connection object
 
# cursor object
 
connection = sqlite3.connect('guests.db')
cursor_obj = connection.cursor()
 
 
# Drop the Guests table if already exists.
# cursor_obj.execute("DROP TABLE IF EXISTS Guests")
 
# Creating table
# table = """ CREATE TABLE guests (
#             Full_Name CHAR(25) NOT NULL,
#             Phone NOT NULL,
#             Email VARCHAR(255) NOT NULL,
#             Room_Type NOT NULL,
#             Room_Number INTEGER NOT NULL,
#             Duration INTEGER NOT NULL,
#             Total_Price INTEGER NOT NULL,
#             Payment_Method NOT NULL
#         ); """

# cursor_obj.execute(table)
# connection.close()


class Ui_guestPanel(object):
    def setupUi(self, guestPanel):
        guestPanel.setObjectName("guestPanel")
        guestPanel.resize(695, 586)
        font = QtGui.QFont()
        font.setPointSize(8)
        guestPanel.setFont(font)
        guestPanel.setStyleSheet("background-color: rgb(237, 246, 249);")
        self.label = QtWidgets.QLabel(guestPanel)
        self.label.setGeometry(QtCore.QRect(60, 0, 591, 91))
        font = QtGui.QFont()
        font.setFamily("Big John")
        font.setPointSize(9)
        self.label.setFont(font)
        self.label.setStyleSheet("")
        self.label.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label.setLineWidth(2)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(guestPanel)
        self.label_2.setGeometry(QtCore.QRect(60, 90, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Fredoka Light")
        font.setPointSize(13)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.fullNameLine = QtWidgets.QLineEdit(guestPanel)
        self.fullNameLine.setGeometry(QtCore.QRect(230, 94, 391, 19))
        self.fullNameLine.setPlaceholderText("John Doe")
        self.fullNameLine.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "font: 25 10pt \"Roboto Light\";")
        self.fullNameLine.setObjectName("self.fullNameLine")
        self.fullNameError = QtWidgets.QLabel(guestPanel)
        self.fullNameError.setEnabled(True)
        self.fullNameError.setGeometry(QtCore.QRect(230, 114, 391, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto Light")
        font.setPointSize(10)
        self.fullNameError.setFont(font)
        self.fullNameError.setStyleSheet("color: rgb(237, 246, 249);")
        self.fullNameError.setObjectName("fullNameError")
        self.phoneNumberLine = QtWidgets.QLineEdit(guestPanel)
        self.phoneNumberLine.setGeometry(QtCore.QRect(230, 164, 391, 20))
        self.phoneNumberLine.setPlaceholderText("Country code+Phone number: eg. +971123456789")
        self.phoneNumberLine.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "font: 25 10pt \"Roboto Light\";")
        self.phoneNumberLine.setText("")
        self.phoneNumberLine.setObjectName("self.phoneNumberLine")
        self.label_3 = QtWidgets.QLabel(guestPanel)
        self.label_3.setGeometry(QtCore.QRect(60, 147, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Fredoka Light")
        font.setPointSize(13)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.phoneNumberError = QtWidgets.QLabel(guestPanel)
        self.phoneNumberError.setGeometry(QtCore.QRect(230, 184, 391, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto Light")
        font.setPointSize(10)
        self.phoneNumberError.setFont(font)
        self.phoneNumberError.setStyleSheet("color: rgb(237, 246, 249);")
        self.phoneNumberError.setObjectName("phoneNumberError")
        self.emailLine = QtWidgets.QLineEdit(guestPanel)
        self.emailLine.setGeometry(QtCore.QRect(230, 224, 391, 19))
        self.emailLine.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "font: 25 10pt \"Roboto Light\";")
        self.emailLine.setObjectName("self.emailLine")
        self.label_4 = QtWidgets.QLabel(guestPanel)
        self.label_4.setGeometry(QtCore.QRect(60, 224, 161, 21))
        font = QtGui.QFont()
        font.setFamily("Fredoka Light")
        font.setPointSize(13)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.emailError = QtWidgets.QLabel(guestPanel)
        self.emailError.setGeometry(QtCore.QRect(230, 254, 391, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto Light")
        font.setPointSize(10)
        self.emailError.setFont(font)
        self.emailError.setStyleSheet("color: rgb(237, 246, 249);\n"
        "")
        self.emailError.setObjectName("emailError")
        self.spinBox = QtWidgets.QSpinBox(guestPanel)
        self.spinBox.setGeometry(QtCore.QRect(440, 354, 51, 21))
        self.spinBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "font: 25 10pt \"Roboto Light\";")
        self.spinBox.setObjectName("spinBox")
        self.label_6 = QtWidgets.QLabel(guestPanel)
        self.label_6.setGeometry(QtCore.QRect(90, 354, 351, 21))
        font = QtGui.QFont()
        font.setFamily("Fredoka Light")
        font.setPointSize(13)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_8 = QtWidgets.QLabel(guestPanel)
        self.label_8.setGeometry(QtCore.QRect(90, 455, 400, 80))
        font = QtGui.QFont()
        font.setFamily("Roboto Light")
        font.setPointSize(8)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("color: red;")
        self.label_8.setObjectName("label_8")
        self.doneButton = QtWidgets.QPushButton(guestPanel)
        self.doneButton.setGeometry(QtCore.QRect(290, 520, 141, 50))
        font = QtGui.QFont()
        font.setFamily("Fredoka Light")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.doneButton.setFont(font)
        self.doneButton.setStyleSheet("background-color: rgb(226, 149, 120);\n"
        "border-radius: 25px;")
        self.doneButton.setObjectName("doneButton")
        self.label_7 = QtWidgets.QLabel(guestPanel)
        self.label_7.setGeometry(QtCore.QRect(90, 304, 311, 21))
        font = QtGui.QFont()
        font.setFamily("Fredoka Light")
        font.setPointSize(13)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.comboBox = QtWidgets.QComboBox(guestPanel)
        self.comboBox.setGeometry(QtCore.QRect(440, 304, 151, 21))
        self.comboBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "font: 25 10pt \"Roboto Light\";")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_5 = QtWidgets.QLabel(guestPanel)
        self.label_5.setGeometry(QtCore.QRect(90, 424, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Fredoka Light")
        font.setPointSize(13)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.cashRadio = QtWidgets.QRadioButton(guestPanel)
        self.cashRadio.setEnabled(True)
        self.cashRadio.setGeometry(QtCore.QRect(260, 434, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Roboto Light")
        font.setPointSize(10)
        self.cashRadio.setFont(font)
        self.cashRadio.setObjectName("cashRadio")
        self.cardRadio = QtWidgets.QRadioButton(guestPanel)
        self.cardRadio.setEnabled(True)
        self.cardRadio.setGeometry(QtCore.QRect(370, 434, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Roboto Light")
        font.setPointSize(10)
        self.cardRadio.setFont(font)
        self.cardRadio.setObjectName("cardRadio")
        self.calculateButton = QtWidgets.QPushButton(guestPanel)
        self.calculateButton.setGeometry(QtCore.QRect(100, 394, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Roboto Light")
        font.setPointSize(9)
        self.calculateButton.setFont(font)
        self.calculateButton.setStyleSheet("background-color: rgb(249, 223, 220);")
        self.calculateButton.setObjectName("calculateButton")
        self.pricingLable = QtWidgets.QLabel(guestPanel)
        self.pricingLable.setGeometry(QtCore.QRect(200, 394, 450, 20))
        font = QtGui.QFont()
        font.setFamily("Roboto Light")
        font.setPointSize(10)
        self.pricingLable.setFont(font)
        self.pricingLable.setText("")
        self.pricingLable.setObjectName("pricingLable")

        self.retranslateUi(guestPanel)
        QtCore.QMetaObject.connectSlotsByName(guestPanel)

        self.guestPanel = guestPanel

        #self.fullNameLine, self.phoneNumberLine, self.emailLine

        # Connect the 'done' button to the 'done' method for processing the check-in.
        self.doneButton.clicked.connect(self.done)
        # Connect the 'calculate' button to the 'cal' method for calculating total price.
        self.calculateButton.clicked.connect(self.cal)

    def done(self):
        # Reset the count to 0 for this check-in process.
        self.count = 0
        
        # Retrieve the guest's full name using the nameCheck method.
        fullName = self.nameCheck()
        # Retrieve the guest's email using the emailCheck method.
        email = self.emailCheck()
        # Retrieve the guest's phone number using the phoneCheck method.
        phone = self.phoneCheck()
        # Get the selected room type from the comboBox.
        roomType = self.comboBox.currentText()
        # Generate a unique room number using the roomNumber_generator method.
        roomNumber = self.roomNumber_generator()
        # Get the duration of stay from the spinBox widget.
        duration = self.spinBox.value()

        # Check if the card payment option is selected and get its text.
        if self.cardRadio.isChecked() == True:
            payment = self.cardRadio.text()
        # Check if the cash payment option is selected and get its text.
        if self.cashRadio.isChecked() == True:
            payment = self.cashRadio.text()

        # If the duration is 0, increment it to 1 to avoid a stay duration of zero days.
        if duration == 0:
            duration += 1

        # If no validation errors (count == 0), create a new guest entry.
        if self.count == 0:
            # Create a guest object with the collected information.
            client = guest(fullName, phone, email, roomType, roomNumber, duration, payment)
            # Connect to the SQLite database.
            conn = sqlite3.connect('guests.db')
            cursor = conn.cursor()
            # Prepare the new guest's details for insertion into the database.
            new_guest = [client.fullname, client.phoneNumber, client.email, client.roomType, client.roomNumber, client.duration, self.cal(), client.paymentMethod]
            # Insert the new guest's details into the 'Guests' table.
            cursor.execute("""INSERT INTO Guests VALUES (?, ?, ?, ?, ?, ?, ?, ?)""", new_guest)
            # Commit the transaction to save changes to the database.
            conn.commit()
            # Close the database connection.
            conn.close()
            # Show a popup message indicating successful check-in.
            self.popup_done()
            # Close the guest panel after successful check-in.
            self.guestPanel.close()

    def roomNumber_generator(self):
        # Establish connection to the database to fetch existing room numbers.
        connection_obj = sqlite3.connect('guests.db') 

        # Create a cursor object to execute SQL commands.
        cursor_obj = connection_obj.cursor() 

        # Define a SQL query to select all room numbers from the 'guests' table.
        statement = '''SELECT Room_Number FROM guests'''

        # Execute the SQL query to retrieve existing room numbers.
        cursor_obj.execute(statement) 

        # Fetch all results from the executed query, which are tuples of room numbers.
        output = cursor_obj.fetchall() 

        # Convert the results into a list of existing room numbers.
        roomList = [row[0] for row in output]

        # Commit the transaction (though there are no changes to commit here).
        connection_obj.commit()

        # Close the connection to the database.
        connection_obj.close()

        # Determine the range of room numbers based on the selected room type from the comboBox.
        room = self.comboBox.currentIndex()
        match room:
            case 0:
                range_start, range_end = 101, 201
            case 1:
                range_start, range_end = 201, 301
            case 2:
                range_start, range_end = 301, 401
            case 3:
                range_start, range_end = 401, 501
            case 4:
                range_start, range_end = 501, 601
            case 5:
                range_start, range_end = 601, 701

        # Generate a unique room number within the determined range that is not already taken.
        while True:
            # Randomly select a room number within the specified range.
            self.roomNumber = random.randrange(range_start, range_end)
            # Check if the selected room number is not already in use.
            if self.roomNumber not in roomList:
                # Return the unique room number.
                return self.roomNumber

        
      
    
    def nameCheck(self):
        fullName = self.fullNameLine.text()
        checkName = re.search("^[A-Z][a-zA-Z '.-]*[A-Za-z][^-]$",fullName)
        if checkName == None or fullName=="":
            self.fullNameError.setStyleSheet("color:red;")
            self.count += 1

        if checkName != None and fullName !="":
            self.fullNameError.setText("")
            return(fullName)

    def phoneCheck(self):
        phone = self.phoneNumberLine.text()
        checkPhone = re.search("^\+\d{1,3}\d{9}$",phone)
        if checkPhone == None or phone=="":
            self.phoneNumberError.setStyleSheet("color:red;")
            self.count += 1

        if checkPhone != None and phone != "":
            self.phoneNumberError.setText("")
            return phone
    
    def emailCheck(self):
        email = self.emailLine.text()
        checkEmail = re.search("(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)",email)
        if checkEmail == None or email=="":
            self.emailError.setStyleSheet("color:red;")
            self.count += 1

        if checkEmail != None and email != "" :
            self.emailError.setText("")
            return email
    

    def cal(self):
        x = (self.comboBox.currentIndex()+1) * 100
        self.pricingLable.setText(f"{self.comboBox.currentText()} is ${x} per night and ${x*self.spinBox.value()} in total.")
        return x*self.spinBox.value()
    
    def popup_done(self):
        msg = QMessageBox()
        msg.setWindowTitle("Done!")
        msg.setText(f"Your registration is successfully completed. Your room number is {self.roomNumber}")
        msg.setInformativeText("Thanks for registration")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Close)
        msg.exec_()

    def retranslateUi(self, guestPanel):
        _translate = QtCore.QCoreApplication.translate
        guestPanel.setWindowTitle(_translate("guestPanel", "Reservation"))
        self.label.setText(_translate("guestPanel", "Please enter your correct information to complete your reservation."))
        self.label_2.setText(_translate("guestPanel", "Full Name:"))
        self.fullNameError.setText(_translate("guestPanel", "Please your name and family name in a correct form"))
        self.label_3.setText(_translate("guestPanel", "Phone Number:"))
        self.phoneNumberError.setText(_translate("guestPanel", "Please enter your correct phone number"))
        self.label_4.setText(_translate("guestPanel", "Email Address:"))
        self.emailError.setText(_translate("guestPanel", "Please enter your correct email address"))
        self.label_6.setText(_translate("guestPanel", "How Many Days are You Planning to Stay?"))
        self.label_8.setText(_translate("guestPanel", "Please note that every single member of the room has to have an ID card or Passport.\nPlease note that if your staying time is 0, the system will automatically set it on 1."))
        self.doneButton.setText(_translate("guestPanel", "Done "))
        self.label_7.setText(_translate("guestPanel", "What Kind of Room Do You Want?"))
        self.comboBox.setItemText(0, _translate("guestPanel", "Double Room"))
        self.comboBox.setItemText(1, _translate("guestPanel", "Single Room"))
        self.comboBox.setItemText(2, _translate("guestPanel", "Deluxe Room"))
        self.comboBox.setItemText(3, _translate("guestPanel", "Connected Room"))
        self.comboBox.setItemText(4, _translate("guestPanel", "Triple Room"))
        self.comboBox.setItemText(5, _translate("guestPanel", "Suite"))
        self.label_5.setText(_translate("guestPanel", "Payment Method:"))
        self.cashRadio.setText(_translate("guestPanel", "Cash"))
        self.cardRadio.setText(_translate("guestPanel", "Card"))
        self.calculateButton.setText(_translate("guestPanel", "Calculate"))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    guestPanel = QtWidgets.QWidget()
    ui = Ui_guestPanel()
    ui.setupUi(guestPanel)
    guestPanel.show()
    sys.exit(app.exec_())

