# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\checkOut.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3


class Ui_checkOut(object):
    def setupUi(self, checkOut):
        checkOut.setObjectName("checkOut")
        checkOut.resize(500, 500)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(".\\Images/removeUser.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        checkOut.setWindowIcon(icon)
        checkOut.setStyleSheet("background-color: rgb(237, 246, 249);")
        self.listWidget = QtWidgets.QListWidget(checkOut)
        self.listWidget.setGeometry(QtCore.QRect(15, 120, 470, 330))
        self.listWidget.setObjectName("listWidget")
        self.label = QtWidgets.QLabel(checkOut)
        self.label.setGeometry(QtCore.QRect(10, 10, 471, 61))
        font = QtGui.QFont()
        font.setFamily("Fredoka")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.infoLine = QtWidgets.QLineEdit(checkOut)
        self.infoLine.setGeometry(QtCore.QRect(50, 70, 311, 31))
        self.infoLine.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "font: 25 10pt \"Roboto Light\";")
        self.infoLine.setObjectName("infoLine")
        self.searchButton = QtWidgets.QPushButton(checkOut)
        self.searchButton.setGeometry(QtCore.QRect(370, 70, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Fredoka")
        font.setPointSize(14)
        self.searchButton.setFont(font)
        self.searchButton.setStyleSheet("background-color: rgb(226, 149, 120);\n"
        "border-radius: 25px;")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(".\\Images/search.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.searchButton.setIcon(icon1)
        self.searchButton.setIconSize(QtCore.QSize(20, 20))
        self.searchButton.setObjectName("searchButton")

        self.retranslateUi(checkOut)
        QtCore.QMetaObject.connectSlotsByName(checkOut)

        # Connect the search button to the search function
        self.searchButton.clicked.connect(self.searchDatabase)
        
        # Connect the list widget's double click signal to the delete function
        self.listWidget.itemDoubleClicked.connect(self.deleteGuest)

    def searchDatabase(self):
        keyword = self.infoLine.text()

        # Connect to the SQLite database
        connection_obj = sqlite3.connect('guests.db')
        cursor_obj = connection_obj.cursor()

        # Execute the SELECT statement with a LIKE clause for searching
        statement = '''
            SELECT * FROM guests 
            WHERE Full_Name LIKE ? 
            OR Phone LIKE ? 
            OR Email LIKE ? 
            OR Room_Type LIKE ? 
            OR Room_Number LIKE ? 
            OR Duration LIKE ? 
            OR Total_Price LIKE ? 
            OR Payment_Method LIKE ?
        '''
        cursor_obj.execute(statement, (f'%{keyword}%',) * 8)

        # Fetch all rows from the query
        rows = cursor_obj.fetchall()

        # Clear the list widget before showing new results
        self.listWidget.clear()

        # Iterate over the rows and add each to the list widget
        for row in rows:
            item_text = " | ".join(map(str, row))  # Convert each row to a string
            list_item = QtWidgets.QListWidgetItem(item_text)
            self.listWidget.addItem(list_item)

        # Close the database connection
        connection_obj.close()

    def deleteGuest(self, item):
        # Connect to the SQLite database
        connection_obj = sqlite3.connect('guests.db')
        cursor_obj = connection_obj.cursor()

        # Extract guest details from the selected item
        guest_details = item.text().split(" | ")
        full_name = guest_details[0]

        # Execute the DELETE statement
        statement = 'DELETE FROM guests WHERE Full_Name = ?'
        cursor_obj.execute(statement, (full_name,))

        # Commit the changes and close the database connection
        connection_obj.commit()
        connection_obj.close()

        # Remove the item from the list widget
        self.listWidget.takeItem(self.listWidget.row(item))

    def retranslateUi(self, checkOut):
        _translate = QtCore.QCoreApplication.translate
        checkOut.setWindowTitle(_translate("checkOut", "Check Out"))
        self.label.setText(_translate("checkOut", "Search for a guest and then double click on it to checkout:"))
        self.searchButton.setText(_translate("checkOut", "Search"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    checkOut = QtWidgets.QWidget()
    ui = Ui_checkOut()
    ui.setupUi(checkOut)
    checkOut.show()
    sys.exit(app.exec_())
